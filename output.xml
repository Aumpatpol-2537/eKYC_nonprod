<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.2 (Python 3.9.1 on darwin)" generated="20220617 17:46:34.724" rpa="false">
<suite id="s1" name="24.Push Noti Test" source="/Users/patcharapol/Desktop/eKYC/eKYC/api-ekyc/Test case/24.push_noti_test.robot">
<kw name="Generate_Partner_Secret" library="Generate_Partner_Secret_page" type="setup">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_PARTNER}</arg>
<arg>TCMB</arg>
<arg>partner-secret</arg>
<arg>nonprod</arg>
<arg>file</arg>
<arg>file</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220617 17:46:35.478" level="INFO">Starting process:
java -jar tcrb-ekyc-partner-1.7.jar TCMB partner-secret nonprod file file</msg>
<msg timestamp="20220617 17:46:35.485" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220617 17:46:35.979" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220617 17:46:35.477" endtime="20220617 17:46:35.980"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>partner_secret.txt</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220617 17:46:35.981" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Desktop/eKYC/partner_secret.txt"&gt;/Users/patcharapol/Desktop/eKYC/partner_secret.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220617 17:46:35.981" level="INFO">${TextFileContent} = HXW4SHYOnG/hCndhTESpgF8tGpEd+XSibbuuwN8GU5JDuHKltKOcO+tYZvHI/42i9igH3O5eHS2JO+jnfn+LHtzCQP7+D/z67Ha+Z41xDELykOyNzESDZL/ptzLXkCHI2WSmL2nzsRlqd+F5KZLIK9xwHYQEycEGw9bLYk5eYXOxhyX4GcMldu6w8Ksac50gwOouG2lU...</msg>
<status status="PASS" starttime="20220617 17:46:35.980" endtime="20220617 17:46:35.981"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_PARTNER_SECRET}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220617 17:46:35.985" level="INFO">${GET_PARTNER_SECRET} = HXW4SHYOnG/hCndhTESpgF8tGpEd+XSibbuuwN8GU5JDuHKltKOcO+tYZvHI/42i9igH3O5eHS2JO+jnfn+LHtzCQP7+D/z67Ha+Z41xDELykOyNzESDZL/ptzLXkCHI2WSmL2nzsRlqd+F5KZLIK9xwHYQEycEGw9bLYk5eYXOxhyX4GcMldu6w8Ksac50gwOouG2lU...</msg>
<status status="PASS" starttime="20220617 17:46:35.982" endtime="20220617 17:46:35.986"></status>
</kw>
<status status="PASS" starttime="20220617 17:46:35.477" endtime="20220617 17:46:35.986"></status>
</kw>
<test id="s1-t1" name="Push_noti_1">
<kw name="Generate_QR_Code_for_test_qrstamp_scene" library="QR_code_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_GEN_QR}</arg>
<arg>partner-secret=${GET_PARTNER_SECRET}</arg>
</arguments>
<status status="PASS" starttime="20220617 17:46:35.987" endtime="20220617 17:46:35.988"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${BOT_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220617 17:46:35.988" level="INFO">Creating Session using : alias=eKYC, url=https://api-dev.tcrb-onlinebanking-privated-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220617 17:46:35.988" endtime="20220617 17:46:35.989"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>cid=${AUM}</arg>
<arg>twins_status=true</arg>
<arg>twins_gender=male</arg>
<arg>journey_code=JN003</arg>
<arg>consent_onetrust_version=</arg>
<arg>consent_internal_version=</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220617 17:46:35.990" level="INFO">&amp;{body} = { cid=35sU6D/S33UB3c0CM0OxA6FqdQI2h0fUAtT3ko4p1TsvyoWuFbhjFko= | twins_status=true | twins_gender=male | journey_code=JN003 | consent_onetrust_version= | consent_internal_version= }</msg>
<status status="PASS" starttime="20220617 17:46:35.989" endtime="20220617 17:46:35.990"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GEN_QRCODE}</arg>
<arg>headers=&amp;{HEADER_GEN_QR}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220617 17:46:38.702" level="INFO">POST Request : url=https://api-dev.tcrb-onlinebanking-privated-bottech.com/tcrb-platform-apipartner/v1/qr/generate 
 path_url=/tcrb-platform-apipartner/v1/qr/generate 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'Content-Type': 'application/json', 'partner-code': 'TCMB', 'partner-secret': 'HXW4SHYOnG/hCndhTESpgF8tGpEd+XSibbuuwN8GU5JDuHKltKOcO+tYZvHI/42i9igH3O5eHS2JO+jnfn+LHtzCQP7+D/z67Ha+Z41xDELykOyNzESDZL/ptzLXkCHI2WSmL2nzsRlqd+F5KZLIK9xwHYQEycEGw9bLYk5eYXOxhyX4GcMldu6w8Ksac50gwOouG2lUpRkGnLHmUGtujlXeAOmgKkquzSLYEwHY/D9BtLgmmylrlDQl16e3SK8=', 'x-apigw-api-id': 'fcs9rj83ui', 'Content-Length': '204'} 
 body=b'{"cid": "35sU6D/S33UB3c0CM0OxA6FqdQI2h0fUAtT3ko4p1TsvyoWuFbhjFko=", "twins_status": "true", "twins_gender": "male", "journey_code": "JN003", "consent_onetrust_version": "", "consent_internal_version": ""}' 
 </msg>
<msg timestamp="20220617 17:46:38.703" level="INFO">POST Response : url=https://api-dev.tcrb-onlinebanking-privated-bottech.com/tcrb-platform-apipartner/v1/qr/generate 
 status=200, reason=OK 
 headers={'Date': 'Fri, 17 Jun 2022 10:46:38 GMT', 'Content-Type': 'application/json', 'Content-Length': '267', 'Connection': 'keep-alive', 'Server': 'Server', 'x-amzn-RequestId': 'f7485926-1788-40d5-b442-4356dfd3b50b', 'x-amz-apigw-id': 'T3M97F9QSQ0FZxw=', 'X-Amzn-Trace-Id': 'Root=1-62ac5b8c-580462c216b6736e6aa148d1'} 
 body={"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"qr":"2431542013407604745361561","qr_expired":"2022-06-18 23:59:59","qr_status":"active"}} 
 </msg>
<msg timestamp="20220617 17:46:38.703" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'api-dev.tcrb-onlinebanking-privated-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220617 17:46:38.703" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220617 17:46:35.991" endtime="20220617 17:46:38.703"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${response.json()["status"]["code"]}</arg>
</arguments>
<msg timestamp="20220617 17:46:38.707" level="INFO">${RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220617 17:46:38.704" endtime="20220617 17:46:38.708"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${response.json()["status"]["message"]}</arg>
</arguments>
<msg timestamp="20220617 17:46:38.711" level="INFO">${RESPONSE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220617 17:46:38.708" endtime="20220617 17:46:38.711"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${response.json()["status"]["remark"]}</arg>
</arguments>
<msg timestamp="20220617 17:46:38.715" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220617 17:46:38.712" endtime="20220617 17:46:38.715"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_VALUE}</arg>
<arg>${response.json()["data"]["qr"]}</arg>
</arguments>
<msg timestamp="20220617 17:46:38.718" level="INFO">${QR_VALUE} = 2431542013407604745361561</msg>
<status status="PASS" starttime="20220617 17:46:38.715" endtime="20220617 17:46:38.718"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_EXPIRE}</arg>
<arg>${response.json()["data"]["qr_expired"]}</arg>
</arguments>
<msg timestamp="20220617 17:46:38.722" level="INFO">${QR_EXPIRE} = 2022-06-18 23:59:59</msg>
<status status="PASS" starttime="20220617 17:46:38.719" endtime="20220617 17:46:38.722"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_STATUS}</arg>
<arg>${response.json()["data"]["qr_status"]}</arg>
</arguments>
<msg timestamp="20220617 17:46:38.725" level="INFO">${QR_STATUS} = active</msg>
<status status="PASS" starttime="20220617 17:46:38.722" endtime="20220617 17:46:38.725"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_API}</arg>
<arg>${response.content}</arg>
</arguments>
<msg timestamp="20220617 17:46:38.728" level="INFO">${RESPONSE_API} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"\xe0\xb8\x94\xe0\xb8\xb3\xe0\xb9\x80\xe0\xb8\x99\xe0\xb8\xb4\xe0\xb8\x99\xe0\xb...</msg>
<status status="PASS" starttime="20220617 17:46:38.725" endtime="20220617 17:46:38.728"></status>
</kw>
<status status="PASS" starttime="20220617 17:46:35.987" endtime="20220617 17:46:38.728"></status>
</kw>
<kw name="Start Project" library="Main">
<kw name="Login_Get_Token" library="Login_api_page">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220617 17:46:38.730" level="INFO">Creating Session using : alias=eKYC, url=https://tablet.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220617 17:46:38.729" endtime="20220617 17:46:38.730"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>username=EKYC003</arg>
<arg>password=P@ssw0rd</arg>
<arg>partner_code=TCRB-TABLET</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220617 17:46:38.731" level="INFO">&amp;{body} = { username=EKYC003 | password=P@ssw0rd | partner_code=TCRB-TABLET }</msg>
<status status="PASS" starttime="20220617 17:46:38.730" endtime="20220617 17:46:38.731"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_LOGIN}</arg>
<arg>headers=&amp;{HEADER_LOGIN}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220617 17:46:42.984" level="INFO">POST Request : url=https://tablet.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/login 
 path_url=/tcrb-platform-kyc/v1/login 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'hfverbnykjadwedfasvbetj', 'Content-Length': '78', 'Content-Type': 'application/json'} 
 body=b'{"username": "EKYC003", "password": "P@ssw0rd", "partner_code": "TCRB-TABLET"}' 
 </msg>
<msg timestamp="20220617 17:46:42.984" level="INFO">POST Response : url=https://tablet.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/login 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '4138', 'Connection': 'keep-alive', 'Date': 'Fri, 17 Jun 2022 10:46:42 GMT', 'x-amzn-RequestId': 'bc747d18-5030-419a-bd39-4023eb553228', 'x-amz-apigw-id': 'T3M-XEftyQ0FfuQ=', 'X-Amzn-Trace-Id': 'Root=1-62ac5b8e-0d51113a2b3eab521b4a5e49', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 a3cd9a6705f4dbb064ddd133a5134142.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'SIN2-P2', 'X-Amz-Cf-Id': 'qWvw9Yzn94okFhpRpLIJrj7ssd3xUvBlPSLdYXmgamg8Bv-XhyTXGA=='} 
 body={"status":{"code":"0","message":"Success","remark":null,"user_code":null,"user_message_en":null,"user_message_th":null},"data":{"name":"TB0003","surname":"","username":"ekyc003","role":[{"name":"eKYC Role20"}],"parameters":{"session_timeout":300,"card_reader_trial_time":3,"shutter_count_down":5},"access_token":"eyJraWQiOiJldkJhTWlBcUh5MkIrczU5eUl2YmtQQkxYRW53cjZDaE5QT3NrTzdVWEkwPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI4MzU4MTNmZS1hMGVhLTQ5ODItYjgwNS02YzdjN2VkMjhmZTQiLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuYXAtc291dGhlYXN0LTEuYW1hem9uYXdzLmNvbVwvYXAtc291dGhlYXN0LTFfWW9FOVBQR21QIiwiY2xpZW50X2lkIjoiMnJhbWxyc3E0OG8xMzE4bGFqZmdhMnRhb2kiLCJvcmlnaW5fanRpIjoiNmE5NjFmNDgtMzZiMi00ZjNiLWI3Y2ItNzFlNWQ5ZTYyZDRiIiwiZXZlbnRfaWQiOiIyOWY3YjgzZC0zYzQ5LTQzYjgtOGU5Yi05NDgyODI0ZTMxNDUiLCJ0b2tlbl91c2UiOiJhY2Nlc3MiLCJzY29wZSI6ImF3cy5jb2duaXRvLnNpZ25pbi51c2VyLmFkbWluIiwiYXV0aF90aW1lIjoxNjU1NDYyODAyLCJleHAiOjE2NTU0NjMxMDIsImlhdCI6MTY1NTQ2MjgwMiwianRpIjoiOWZiOGY2OWEtMjRkMi00OTI3LWFkYjItNjA3YTIyYzUxMTY4IiwidXNlcm5hbWUiOiJla3ljMDAzIn0.Vp7W-TjhfcWQLKWEq_7CSaZWPH9Ss3plwfpNLlwK8OBDnxg-agThnzNatkeFnVRFcx65e8l8HC_bLtSWTEG8v1ma0_FQSVn_4c5n3keyb2-F1rAlTdvAO5Gj3qJwEg7asmA2VL3WXn61cXr4dKPsdto6YZWU9iNAFU7_EKChMdn8ohawmpfdhEQkM4e4NsI_oJzPsxXtlDk1AhvqPbtU-5zF_n2SCf4oaUuWDZSZLqxIncy4isObwMM9YzV4sOgI-pULHmhkcmwIeUNGmwWkmAFHJRWwubJY8laNKrEJvWBLQOY0CpgJZ459hDM8vTRHr1hNMh0Dn30CVHqR4hr2TQ","refresh_token":"eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.Bg-zBebXnBv532NqwRY3PkTgfVl7oHnNf1U0KMfMRM9pkpE7HtvNMXJxx-93Y3B6KWLiHR9dB6O5mQUt5I420ZS7Qec2rg8jfEHFTJGcZwdwG847bGprGnMVRsoQYRkcRUtMOINIHqVctZrSNoD4NRZtsMNMDLd8DVItAKMzhZmKMammm67eEqBrxJ27oyozTaUIGUU5yJgrvLM902n_BrbtxcgnmmGSQO3lVaYGoSj5eunrcgUHG1nfAk_U1l78P3IW-ivo7AWqF9VRIrtmxD7x5XEIrAiQW51J86P0jTJ6DT4RTkpWaVRxD8tmZZsg3dlYQuLWw-mV1yid4nAd6g.V73L5zyBdMy0hJy5.j2EVacY3TYgbANMYWbdGoJm4yQPj54PocS3ZKC__0ERlagzecCN8x7pNu_5-yCqJwDIy_XpKNj3YPLa_1zRsoOlqw1BxnrdxHPOIDd-3fOmejGiaijP6AC0pDCpPpZJkXNWDMGD5cGXhi6dI6mNSgyc8SBuOLmglOpIHV6YQ90q8k2DnhWFT4GZCHnpnhIvxZXQY6MmGNwVJy5nsE1LPZPuPoVfr5ew9A6BWdjGXCW27A8h1iGkjaHu5k55N-VPbtwqbKzp-aIDVyKjUzgR7fV0qzC_swByj2xu-TKkmW_CgHQ0FDVrdXOcD6jj5-_N0P_5wtm0YlQxPnuFuH1juwATeeKNn1rnKeKEsaIoFhrVJaznmEyxS-i3EEzdQUjOX4V1FCQ3dq81PW-f6icCTdYDlLNkyQwzXTT9I8gta-djgKy_o4lgtUXvSOtbf7rOpO_IlCYf3irUKq97l6Xf96NHtUqJvPKKgekjTaJm5RlKavB7ZI3UkFaPk98UAPKFVkxC-eAI7tvXiVVaeF9iXEylg4nGujxwvf6wDGDzTcgpOmLsN0YT7P2HpgwGIX3lfu6kMbbDdOvSdv6Z8k9nMMyIRwqtZr853e2ruAV4jiLhSdvTeOuu4Xd9N4rdPiOzxvb47YefZkicqCt_xQP8zPNtroGN0_ffKh4wjdseRnnDbjFK3vt0tetIZnCoHujfMeq553I_Nl8wfBaL3vCHDZ3TQhQEYIr4-FAj6JoEmlIv0vhWSG7sHnlLFAiTS4jZeynSws0ii5mE2nuCmDArItZ1XvJegWM-c62TbTysJ6OiRYOW2wdWjR3hPNcdLesZf8jTFDTHuSxlVgXnxJDbQXW1k_zKV-rOFc2ky5EuEV2eWqsaqJ9iJOdMVQMlOmW3CDzZXHWcCny9yIsNCYv72KKwl-ApFYHuBCjiXWMWuS0sPuEw3J--_FPyoAw0C9Wv0WAxXBAOIv6gfnaRQr-IIDxCy3kVnHGfqRaDh4cafMxZC5TpLGiS7rThgdEnrBG6mkHC7Csmd_Q6wnE45GcePWOKYlrt1GxH1pkZDS9Tszl9sKUH2UGAFFA3rO0Kx1VRHHeTuKk6P_FW5tINrN3-H4HEBEPUdWAGMWG9pV7VZ8NYuiV85ZY7oO8dPtVaOhTByiI5sqignrx5wbS1VBgeKvk_8cJfitc857CvWXhzNUoVyquj0cipNLsu-WeR-sbCxk_4mFnMCpqN5V3kJz9oC9pn_dXLmlqZ2U80cwal8H7guKXGfAdL2R4ubPRSy8UqBPHlGDFcUvQ-dfRXg6vu1Hie4.3ox8-crJ-RYwhJfRFJoAzQ","id_token":"eyJraWQiOiI0WmpGNDV1Mk1WaXBtYjZHXC9BM1ViWFdLWHp3UmYxSWNGMkx1XC9COWhUVEU9IiwiYWxnIjoiUlMyNTYifQ.eyJvcmlnaW5fanRpIjoiNmE5NjFmNDgtMzZiMi00ZjNiLWI3Y2ItNzFlNWQ5ZTYyZDRiIiwic3ViIjoiODM1ODEzZmUtYTBlYS00OTgyLWI4MDUtNmM3YzdlZDI4ZmU0IiwiYXVkIjoiMnJhbWxyc3E0OG8xMzE4bGFqZmdhMnRhb2kiLCJldmVudF9pZCI6IjI5ZjdiODNkLTNjNDktNDNiOC04ZTliLTk0ODI4MjRlMzE0NSIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjU1NDYyODAyLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuYXAtc291dGhlYXN0LTEuYW1hem9uYXdzLmNvbVwvYXAtc291dGhlYXN0LTFfWW9FOVBQR21QIiwiY29nbml0bzp1c2VybmFtZSI6ImVreWMwMDMiLCJleHAiOjE2NTU0NjMxMDIsImlhdCI6MTY1NTQ2MjgwMiwianRpIjoiZWYzNzZkNWYtMWM3My00MzQ4LWE0ZmYtYmQ0ZGI4NTE0MjZkIn0.KBePF_KU--mkxUiUB9ERSTT2HPQGNCZvFnzRMo1uggoqcZaul53dN-quJqLfwYbbOo1un4onxInHL3dF0UGMrY-7fOhASeBX7TX9rz8DKO2fMQfsxn72BjETER9BIHfmv8Dh5TEXwNL8-bMbMmZyeOdFBRVE1PmHSqNmdnumlMKdp0M4zrni_R_cDJ-u7JZXApeOZtau-BsV8IfcukMZw-4xMWCsv_LZhcZyY7eheV6C3D4Z_YWNFrIYScEvgpnInl9bfFQo5wUuEn0cN0JrIJMW86d_kn9-j1OTpFLBU8BB3VsHN_DsLqH2kjM50AFKq7n-RWha6SPeZhi-Xf5Fyg"}} 
 </msg>
<msg timestamp="20220617 17:46:42.985" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220617 17:46:42.985" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220617 17:46:38.731" endtime="20220617 17:46:42.985"></status>
</kw>
<kw name="Request Should Be Successful" library="RequestsLibrary">
<doc>Fails if response status code is a client or server error (4xx, 5xx).</doc>
<arguments>
<arg>response=${response}</arg>
</arguments>
<status status="PASS" starttime="20220617 17:46:42.985" endtime="20220617 17:46:42.986"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["status"]["message"]}</arg>
<arg>${RESPONSE_MESSAGE_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20220617 17:46:42.986" endtime="20220617 17:46:42.986"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOGIN_IDTOKEN}</arg>
<arg>${response.json()["data"]["id_token"]}</arg>
</arguments>
<msg timestamp="20220617 17:46:42.989" level="INFO">${LOGIN_IDTOKEN} = eyJraWQiOiI0WmpGNDV1Mk1WaXBtYjZHXC9BM1ViWFdLWHp3UmYxSWNGMkx1XC9COWhUVEU9IiwiYWxnIjoiUlMyNTYifQ.eyJvcmlnaW5fanRpIjoiNmE5NjFmNDgtMzZiMi00ZjNiLWI3Y2ItNzFlNWQ5ZTYyZDRiIiwic3ViIjoiODM1ODEzZmUtYTBlYS00OTgyL...</msg>
<status status="PASS" starttime="20220617 17:46:42.987" endtime="20220617 17:46:42.989"></status>
</kw>
<status status="PASS" starttime="20220617 17:46:38.729" endtime="20220617 17:46:42.989"></status>
</kw>
<status status="PASS" starttime="20220617 17:46:38.728" endtime="20220617 17:46:42.989"></status>
</kw>
<kw name="Validate_QR_Code_for_test_qrstamp_scene" library="QR_code_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220617 17:46:42.990" endtime="20220617 17:46:42.990"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220617 17:46:42.991" level="INFO">Creating Session using : alias=eKYC, url=https://tablet.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220617 17:46:42.991" endtime="20220617 17:46:42.991"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>qr=${QR_VALUE}</arg>
<arg>trans_ref=</arg>
<arg>cid=</arg>
<arg>latitude=13.8694526</arg>
<arg>longitude=100.7180486</arg>
<arg>agent_id=ekyc003</arg>
<arg>agent_name=TB0003</arg>
<arg>device_name=SM-P585Y/samsung</arg>
<arg>device_ip=192.168.2.42</arg>
<arg>imei=abc</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220617 17:46:42.992" level="INFO">&amp;{body} = { qr=2431542013407604745361561 | trans_ref= | cid= | latitude=13.8694526 | longitude=100.7180486 | agent_id=ekyc003 | agent_name=TB0003 | device_name=SM-P585Y/samsung | device_ip=192.168.2.42 | imei=a...</msg>
<status status="PASS" starttime="20220617 17:46:42.991" endtime="20220617 17:46:42.992"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_VALIDATE_QRCODE}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220617 17:46:51.064" level="INFO">POST Request : url=https://tablet.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 path_url=/tcrb-platform-kyc/v1/qr/validate 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiI0WmpGNDV1Mk1WaXBtYjZHXC9BM1ViWFdLWHp3UmYxSWNGMkx1XC9COWhUVEU9IiwiYWxnIjoiUlMyNTYifQ.eyJvcmlnaW5fanRpIjoiNmE5NjFmNDgtMzZiMi00ZjNiLWI3Y2ItNzFlNWQ5ZTYyZDRiIiwic3ViIjoiODM1ODEzZmUtYTBlYS00OTgyLWI4MDUtNmM3YzdlZDI4ZmU0IiwiYXVkIjoiMnJhbWxyc3E0OG8xMzE4bGFqZmdhMnRhb2kiLCJldmVudF9pZCI6IjI5ZjdiODNkLTNjNDktNDNiOC04ZTliLTk0ODI4MjRlMzE0NSIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjU1NDYyODAyLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuYXAtc291dGhlYXN0LTEuYW1hem9uYXdzLmNvbVwvYXAtc291dGhlYXN0LTFfWW9FOVBQR21QIiwiY29nbml0bzp1c2VybmFtZSI6ImVreWMwMDMiLCJleHAiOjE2NTU0NjMxMDIsImlhdCI6MTY1NTQ2MjgwMiwianRpIjoiZWYzNzZkNWYtMWM3My00MzQ4LWE0ZmYtYmQ0ZGI4NTE0MjZkIn0.KBePF_KU--mkxUiUB9ERSTT2HPQGNCZvFnzRMo1uggoqcZaul53dN-quJqLfwYbbOo1un4onxInHL3dF0UGMrY-7fOhASeBX7TX9rz8DKO2fMQfsxn72BjETER9BIHfmv8Dh5TEXwNL8-bMbMmZyeOdFBRVE1PmHSqNmdnumlMKdp0M4zrni_R_cDJ-u7JZXApeOZtau-BsV8IfcukMZw-4xMWCsv_LZhcZyY7eheV6C3D4Z_YWNFrIYScEvgpnInl9bfFQo5wUuEn0cN0JrIJMW86d_kn9-j1OTpFLBU8BB3VsHN_DsLqH2kjM50AFKq7n-RWha6SPeZhi-Xf5Fyg', 'Content-Length': '243', 'Content-Type': 'application/json'} 
 body=b'{"qr": "2431542013407604745361561", "trans_ref": "", "cid": "", "latitude": "13.8694526", "longitude": "100.7180486", "agent_id": "ekyc003", "agent_name": "TB0003", "device_name": "SM-P585Y/samsung", "device_ip": "192.168.2.42", "imei": "abc"}' 
 </msg>
<msg timestamp="20220617 17:46:51.064" level="INFO">POST Response : url=https://tablet.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '266', 'Connection': 'keep-alive', 'Date': 'Fri, 17 Jun 2022 10:46:51 GMT', 'x-amzn-RequestId': 'f222981e-a01e-4543-82a4-b91f565cf577', 'x-amz-apigw-id': 'T3M_BHODyQ0FUrQ=', 'X-Amzn-Trace-Id': 'Root=1-62ac5b93-0a2b81f1715e298b6390d1ae', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 3c5649f7d49e8f5b916e18a72b919074.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'SIN2-P2', 'X-Amz-Cf-Id': 'td6d7VcJRmJK0JRzRttG1evzg1Da3BmBmeV6XmvrUpUXrrwEZKGtyw=='} 
 body={"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"journey_code":"JN003","journey_name":"EKYC QR Signup","kyc_trans_id":"EQ2022061700041"}} 
 </msg>
<msg timestamp="20220617 17:46:51.064" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220617 17:46:51.064" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220617 17:46:42.992" endtime="20220617 17:46:51.065"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${response.json()["status"]["code"]}</arg>
</arguments>
<msg timestamp="20220617 17:46:51.065" level="INFO">${RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220617 17:46:51.065" endtime="20220617 17:46:51.066"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${response.json()["status"]["message"]}</arg>
</arguments>
<msg timestamp="20220617 17:46:51.067" level="INFO">${RESPONSE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220617 17:46:51.066" endtime="20220617 17:46:51.067"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${response.json()["status"]["remark"]}</arg>
</arguments>
<msg timestamp="20220617 17:46:51.068" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220617 17:46:51.067" endtime="20220617 17:46:51.068"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_API}</arg>
<arg>${response.content}</arg>
</arguments>
<msg timestamp="20220617 17:46:51.068" level="INFO">${RESPONSE_API} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"\xe0\xb8\x94\xe0\xb8\xb3\xe0\xb9\x80\xe0\xb8\x99\xe0\xb8\xb4\xe0\xb8\x99\xe0\xb...</msg>
<status status="PASS" starttime="20220617 17:46:51.068" endtime="20220617 17:46:51.068"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USERCODE}</arg>
<arg>${response.json()["status"]["user_code"]}</arg>
</arguments>
<msg timestamp="20220617 17:46:51.072" level="INFO">${RESPONSE_USERCODE} = S0001</msg>
<status status="PASS" starttime="20220617 17:46:51.069" endtime="20220617 17:46:51.072"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_EN}</arg>
<arg>${response.json()["status"]["user_message_en"]}</arg>
</arguments>
<msg timestamp="20220617 17:46:51.077" level="INFO">${RESPONSE_USER_EN} = Success</msg>
<status status="PASS" starttime="20220617 17:46:51.073" endtime="20220617 17:46:51.077"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_TH}</arg>
<arg>${response.json()["status"]["user_message_th"]}</arg>
</arguments>
<msg timestamp="20220617 17:46:51.081" level="INFO">${RESPONSE_USER_TH} = ดำเนินการสำเร็จ</msg>
<status status="PASS" starttime="20220617 17:46:51.078" endtime="20220617 17:46:51.081"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${TRANS_ID}</arg>
<arg>${response.json()["data"]["kyc_trans_id"]}</arg>
</arguments>
<msg timestamp="20220617 17:46:51.084" level="INFO">${TRANS_ID} = EQ2022061700041</msg>
<status status="PASS" starttime="20220617 17:46:51.081" endtime="20220617 17:46:51.084"></status>
</kw>
<status status="PASS" starttime="20220617 17:46:42.990" endtime="20220617 17:46:51.084"></status>
</kw>
<kw name="Agree_term_and_conditions" library="Get_term_and_conditionAPI_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220617 17:46:51.085" endtime="20220617 17:46:51.086"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220617 17:46:51.087" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiI0WmpGNDV1Mk1WaXBtYjZHXC9BM1ViWFdLWHp3UmYxSWNGMkx1XC9COWhUVEU9IiwiYWxnIjoiUlMyNTYifQ.eyJvcmlnaW5fanRpIjoiNmE5NjFmNDgtMzZiMi00ZjNiLWI3Y2ItNzFlNWQ5ZTYyZDRiIiwic3ViIjoiODM1ODEzZmUtYTBlYS00OTgyLWI4MDUtNmM3YzdlZDI4ZmU0IiwiYXVkIjoiMnJhbWxyc3E0OG8xMzE4bGFqZmdhMnRhb2kiLCJldmVudF9pZCI6IjI5ZjdiODNkLTNjNDktNDNiOC04ZTliLTk0ODI4MjRlMzE0NSIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjU1NDYyODAyLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuYXAtc291dGhlYXN0LTEuYW1hem9uYXdzLmNvbVwvYXAtc291dGhlYXN0LTFfWW9FOVBQR21QIiwiY29nbml0bzp1c2VybmFtZSI6ImVreWMwMDMiLCJleHAiOjE2NTU0NjMxMDIsImlhdCI6MTY1NTQ2MjgwMiwianRpIjoiZWYzNzZkNWYtMWM3My00MzQ4LWE0ZmYtYmQ0ZGI4NTE0MjZkIn0.KBePF_KU--mkxUiUB9ERSTT2HPQGNCZvFnzRMo1uggoqcZaul53dN-quJqLfwYbbOo1un4onxInHL3dF0UGMrY-7fOhASeBX7TX9rz8DKO2fMQfsxn72BjETER9BIHfmv8Dh5TEXwNL8-bMbMmZyeOdFBRVE1PmHSqNmdnumlMKdp0M4zrni_R_cDJ-u7JZXApeOZtau-BsV8IfcukMZw-4xMWCsv_LZhcZyY7eheV6C3D4Z_YWNFrIYScEvgpnInl9bfFQo5wUuEn0cN0JrIJMW86d_kn9-j1OTpFLBU8BB3VsHN_DsLqH2kjM50AFKq7n-RWha6SPeZhi-Xf5Fyg'}</msg>
<status status="PASS" starttime="20220617 17:46:51.086" endtime="20220617 17:46:51.087"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220617 17:46:51.088" level="INFO">Creating Session using : alias=eKYC, url=https://tablet.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220617 17:46:51.087" endtime="20220617 17:46:51.088"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"kyc_trans_id" : "${TRANS_ID}", "accept" : true }</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220617 17:46:51.089" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220617 17:46:51.089" level="INFO">To JSON using : content={"kyc_trans_id" : "EQ2022061700041", "accept" : true } </msg>
<msg timestamp="20220617 17:46:51.089" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220617 17:46:51.089" level="INFO">${body} = {'kyc_trans_id': 'EQ2022061700041', 'accept': True}</msg>
<status status="PASS" starttime="20220617 17:46:51.088" endtime="20220617 17:46:51.089"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GET_TERM_AND_CONDITION}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220617 17:46:55.328" level="INFO">POST Request : url=https://tablet.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/termandcondition 
 path_url=/tcrb-platform-kyc/v1/termandcondition 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiI0WmpGNDV1Mk1WaXBtYjZHXC9BM1ViWFdLWHp3UmYxSWNGMkx1XC9COWhUVEU9IiwiYWxnIjoiUlMyNTYifQ.eyJvcmlnaW5fanRpIjoiNmE5NjFmNDgtMzZiMi00ZjNiLWI3Y2ItNzFlNWQ5ZTYyZDRiIiwic3ViIjoiODM1ODEzZmUtYTBlYS00OTgyLWI4MDUtNmM3YzdlZDI4ZmU0IiwiYXVkIjoiMnJhbWxyc3E0OG8xMzE4bGFqZmdhMnRhb2kiLCJldmVudF9pZCI6IjI5ZjdiODNkLTNjNDktNDNiOC04ZTliLTk0ODI4MjRlMzE0NSIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjU1NDYyODAyLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuYXAtc291dGhlYXN0LTEuYW1hem9uYXdzLmNvbVwvYXAtc291dGhlYXN0LTFfWW9FOVBQR21QIiwiY29nbml0bzp1c2VybmFtZSI6ImVreWMwMDMiLCJleHAiOjE2NTU0NjMxMDIsImlhdCI6MTY1NTQ2MjgwMiwianRpIjoiZWYzNzZkNWYtMWM3My00MzQ4LWE0ZmYtYmQ0ZGI4NTE0MjZkIn0.KBePF_KU--mkxUiUB9ERSTT2HPQGNCZvFnzRMo1uggoqcZaul53dN-quJqLfwYbbOo1un4onxInHL3dF0UGMrY-7fOhASeBX7TX9rz8DKO2fMQfsxn72BjETER9BIHfmv8Dh5TEXwNL8-bMbMmZyeOdFBRVE1PmHSqNmdnumlMKdp0M4zrni_R_cDJ-u7JZXApeOZtau-BsV8IfcukMZw-4xMWCsv_LZhcZyY7eheV6C3D4Z_YWNFrIYScEvgpnInl9bfFQo5wUuEn0cN0JrIJMW86d_kn9-j1OTpFLBU8BB3VsHN_DsLqH2kjM50AFKq7n-RWha6SPeZhi-Xf5Fyg', 'Content-Length': '51', 'Content-Type': 'application/json'} 
 body=b'{"kyc_trans_id": "EQ2022061700041", "accept": true}' 
 </msg>
<msg timestamp="20220617 17:46:55.328" level="INFO">POST Response : url=https://tablet.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/termandcondition 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '181', 'Connection': 'keep-alive', 'Date': 'Fri, 17 Jun 2022 10:46:55 GMT', 'x-amzn-RequestId': 'ec930625-cc7e-455e-a426-20b7c479846c', 'x-amz-apigw-id': 'T3NASGQLyQ0FSTw=', 'X-Amzn-Trace-Id': 'Root=1-62ac5b9b-09c76743618d896b1b813905', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 12092b1d863b1b4b20da0d09effe7b36.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'SIN2-P2', 'X-Amz-Cf-Id': 'vjg1KOMHA48ckthdtzCIfCOfS9Xn0tnMQbL37tnGxE9GYBVTLujBoA=='} 
 body={"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null} 
 </msg>
<msg timestamp="20220617 17:46:55.328" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220617 17:46:55.328" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220617 17:46:51.090" endtime="20220617 17:46:55.328"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.json()["status"]["code"]}</arg>
<arg>${RESPONSE_CODE_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20220617 17:46:55.329" endtime="20220617 17:46:55.329"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["status"]["message"]}</arg>
<arg>${RESPONSE_MESSAGE_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20220617 17:46:55.330" endtime="20220617 17:46:55.331"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GETTERM_RESPONES_MESSAGE}</arg>
<arg>${response.json()["status"]["message"]}</arg>
</arguments>
<msg timestamp="20220617 17:46:55.335" level="INFO">${GETTERM_RESPONES_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220617 17:46:55.331" endtime="20220617 17:46:55.335"></status>
</kw>
<status status="PASS" starttime="20220617 17:46:51.084" endtime="20220617 17:46:55.335"></status>
</kw>
<kw name="Validate_customer_pass" library="validate_customer_API_page">
<arguments>
<arg>4</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220617 17:46:55.337" endtime="20220617 17:46:55.337"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220617 17:46:55.338" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiI0WmpGNDV1Mk1WaXBtYjZHXC9BM1ViWFdLWHp3UmYxSWNGMkx1XC9COWhUVEU9IiwiYWxnIjoiUlMyNTYifQ.eyJvcmlnaW5fanRpIjoiNmE5NjFmNDgtMzZiMi00ZjNiLWI3Y2ItNzFlNWQ5ZTYyZDRiIiwic3ViIjoiODM1ODEzZmUtYTBlYS00OTgyLWI4MDUtNmM3YzdlZDI4ZmU0IiwiYXVkIjoiMnJhbWxyc3E0OG8xMzE4bGFqZmdhMnRhb2kiLCJldmVudF9pZCI6IjI5ZjdiODNkLTNjNDktNDNiOC04ZTliLTk0ODI4MjRlMzE0NSIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjU1NDYyODAyLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuYXAtc291dGhlYXN0LTEuYW1hem9uYXdzLmNvbVwvYXAtc291dGhlYXN0LTFfWW9FOVBQR21QIiwiY29nbml0bzp1c2VybmFtZSI6ImVreWMwMDMiLCJleHAiOjE2NTU0NjMxMDIsImlhdCI6MTY1NTQ2MjgwMiwianRpIjoiZWYzNzZkNWYtMWM3My00MzQ4LWE0ZmYtYmQ0ZGI4NTE0MjZkIn0.KBePF_KU--mkxUiUB9ERSTT2HPQGNCZvFnzRMo1uggoqcZaul53dN-quJqLfwYbbOo1un4onxInHL3dF0UGMrY-7fOhASeBX7TX9rz8DKO2fMQfsxn72BjETER9BIHfmv8Dh5TEXwNL8-bMbMmZyeOdFBRVE1PmHSqNmdnumlMKdp0M4zrni_R_cDJ-u7JZXApeOZtau-BsV8IfcukMZw-4xMWCsv_LZhcZyY7eheV6C3D4Z_YWNFrIYScEvgpnInl9bfFQo5wUuEn0cN0JrIJMW86d_kn9-j1OTpFLBU8BB3VsHN_DsLqH2kjM50AFKq7n-RWha6SPeZhi-Xf5Fyg'}</msg>
<status status="PASS" starttime="20220617 17:46:55.338" endtime="20220617 17:46:55.338"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220617 17:46:55.339" level="INFO">Creating Session using : alias=eKYC, url=https://tablet.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220617 17:46:55.338" endtime="20220617 17:46:55.339"></status>
</kw>
<kw name="Get_Data_Customer_MainCase" library="Get_data_excel">
<arguments>
<arg>${row_in_excel}</arg>
</arguments>
<kw name="Open Excel Document" library="ExcelLibrary">
<doc>Opens xlsx document file.</doc>
<arguments>
<arg>filename=${FILE_NAME}</arg>
<arg>doc_id=doc1</arg>
</arguments>
<status status="PASS" starttime="20220617 17:46:55.340" endtime="20220617 17:46:55.655"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=4</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_cid}</var>
</assign>
<msg timestamp="20220617 17:46:55.656" level="INFO">${get_cid} = 1100600292875</msg>
<status status="PASS" starttime="20220617 17:46:55.655" endtime="20220617 17:46:55.656"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=5</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${name}</var>
</assign>
<msg timestamp="20220617 17:46:55.657" level="INFO">${name} = พัชรพล</msg>
<status status="PASS" starttime="20220617 17:46:55.656" endtime="20220617 17:46:55.657"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=6</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${surname}</var>
</assign>
<msg timestamp="20220617 17:46:55.657" level="INFO">${surname} = ศุภศิริรัตน์</msg>
<status status="PASS" starttime="20220617 17:46:55.657" endtime="20220617 17:46:55.657"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=7</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${name_en}</var>
</assign>
<msg timestamp="20220617 17:46:55.658" level="INFO">${name_en} = Patcharapol</msg>
<status status="PASS" starttime="20220617 17:46:55.658" endtime="20220617 17:46:55.658"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=8</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${surname_en}</var>
</assign>
<msg timestamp="20220617 17:46:55.659" level="INFO">${surname_en} = Supasirirat</msg>
<status status="PASS" starttime="20220617 17:46:55.658" endtime="20220617 17:46:55.659"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=9</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${bithdate}</var>
</assign>
<msg timestamp="20220617 17:46:55.659" level="INFO">${bithdate} = 27-07-2537</msg>
<status status="PASS" starttime="20220617 17:46:55.659" endtime="20220617 17:46:55.659"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=10</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_mobile}</var>
</assign>
<msg timestamp="20220617 17:46:55.660" level="INFO">${get_mobile} = 0875787441</msg>
<status status="PASS" starttime="20220617 17:46:55.659" endtime="20220617 17:46:55.660"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=11</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_lasercode}</var>
</assign>
<msg timestamp="20220617 17:46:55.660" level="INFO">${get_lasercode} = JT3102714867</msg>
<status status="PASS" starttime="20220617 17:46:55.660" endtime="20220617 17:46:55.660"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_CID}</arg>
<arg>${get_cid}</arg>
</arguments>
<msg timestamp="20220617 17:46:55.661" level="INFO">${GET_CID} = 1100600292875</msg>
<status status="PASS" starttime="20220617 17:46:55.661" endtime="20220617 17:46:55.661"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FIRST_NAME}</arg>
<arg>${name}</arg>
</arguments>
<msg timestamp="20220617 17:46:55.664" level="INFO">${FIRST_NAME} = พัชรพล</msg>
<status status="PASS" starttime="20220617 17:46:55.661" endtime="20220617 17:46:55.664"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SURNAME}</arg>
<arg>${surname}</arg>
</arguments>
<msg timestamp="20220617 17:46:55.665" level="INFO">${SURNAME} = ศุภศิริรัตน์</msg>
<status status="PASS" starttime="20220617 17:46:55.664" endtime="20220617 17:46:55.665"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FIRST_NAME_EN}</arg>
<arg>${name_en}</arg>
</arguments>
<msg timestamp="20220617 17:46:55.668" level="INFO">${FIRST_NAME_EN} = Patcharapol</msg>
<status status="PASS" starttime="20220617 17:46:55.665" endtime="20220617 17:46:55.668"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SURNAME_EN}</arg>
<arg>${surname_en}</arg>
</arguments>
<msg timestamp="20220617 17:46:55.669" level="INFO">${SURNAME_EN} = Supasirirat</msg>
<status status="PASS" starttime="20220617 17:46:55.669" endtime="20220617 17:46:55.669"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BIRTH_DATE}</arg>
<arg>${bithdate}</arg>
</arguments>
<msg timestamp="20220617 17:46:55.672" level="INFO">${BIRTH_DATE} = 27-07-2537</msg>
<status status="PASS" starttime="20220617 17:46:55.669" endtime="20220617 17:46:55.672"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_MOBILE}</arg>
<arg>${get_mobile}</arg>
</arguments>
<msg timestamp="20220617 17:46:55.673" level="INFO">${GET_MOBILE} = 0875787441</msg>
<status status="PASS" starttime="20220617 17:46:55.673" endtime="20220617 17:46:55.673"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_LASER_CODE}</arg>
<arg>${get_lasercode}</arg>
</arguments>
<msg timestamp="20220617 17:46:55.673" level="INFO">${GET_LASER_CODE} = JT3102714867</msg>
<status status="PASS" starttime="20220617 17:46:55.673" endtime="20220617 17:46:55.674"></status>
</kw>
<kw name="Close All Excel Documents" library="ExcelLibrary">
<doc>Closes all opened documents.</doc>
<status status="PASS" starttime="20220617 17:46:55.674" endtime="20220617 17:46:55.674"></status>
</kw>
<status status="PASS" starttime="20220617 17:46:55.340" endtime="20220617 17:46:55.674"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{ "kyc_trans_id":"${TRANS_ID}", "alley": " ", "birth_date": "${BIRTH_DATE}", "cid":"${GET_CID}", "date_of_issue": "04-06-2559", "district": "อำเภอบางกรวย", "expired_date": "26-07-2567", "first_name_en": "${FIRST_NAME_EN}", "first_name_th": "${FIRST_NAME}", "house_no": "425", "issue_by": "พระโขนง/กรุงเทพมหานคร", "lane": " ", "last_name_en": "${SURNAME_EN}", "last_name_th": "${SURNAME}", "middle_name_en": "middle", "middle_name_th": "กลาง", "moo": " ", "province": "บางกะปิ", "request_no": 123456789, "road": "นวมินทร์", "sex": "ชาย", "sub_district": "บางสีทอง", "title_en": "Mr.", "title_th": "นาย", "img": "${IMG}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220617 17:46:55.674" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220617 17:46:55.675" level="INFO">To JSON using : content={ "kyc_trans_id":"EQ2022061700041", "alley": " ", "birth_date": "27-07-2537", "cid":"1100600292875", "date_of_issue": "04-06-2559", "district": "อำเภอบางกรวย", "expired_date": "26-07-2567", "first_name_en": "Patcharapol", "first_name_th": "พัชรพล", "house_no": "425", "issue_by": "พระโขนง/กรุงเทพมหานคร", "lane": " ", "last_name_en": "Supasirirat", "last_name_th": "ศุภศิริรัตน์", "middle_name_en": "middle", "middle_name_th": "กลาง", "moo": " ", "province": "บางกะปิ", "request_no": 123456789, "road": "นวมินทร์", "sex": "ชาย", "sub_district": "บางสีทอง", "title_en": "Mr.", "title_th": "นาย", "img": ""} </msg>
<msg timestamp="20220617 17:46:55.676" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220617 17:46:55.676" level="INFO">${body} = {'kyc_trans_id': 'EQ2022061700041', 'alley': ' ', 'birth_date': '27-07-2537', 'cid': '1100600292875', 'date_of_issue': '04-06-2559', 'district': 'อำเภอบางกรวย', 'expired_date': '26-07-2567', 'first_na...</msg>
<status status="PASS" starttime="20220617 17:46:55.674" endtime="20220617 17:46:55.677"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_VALIDATE_CUSTOMER}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220617 17:47:08.853" level="INFO">POST Request : url=https://tablet.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/validate_customer 
 path_url=/tcrb-platform-kyc/v1/validate_customer 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiI0WmpGNDV1Mk1WaXBtYjZHXC9BM1ViWFdLWHp3UmYxSWNGMkx1XC9COWhUVEU9IiwiYWxnIjoiUlMyNTYifQ.eyJvcmlnaW5fanRpIjoiNmE5NjFmNDgtMzZiMi00ZjNiLWI3Y2ItNzFlNWQ5ZTYyZDRiIiwic3ViIjoiODM1ODEzZmUtYTBlYS00OTgyLWI4MDUtNmM3YzdlZDI4ZmU0IiwiYXVkIjoiMnJhbWxyc3E0OG8xMzE4bGFqZmdhMnRhb2kiLCJldmVudF9pZCI6IjI5ZjdiODNkLTNjNDktNDNiOC04ZTliLTk0ODI4MjRlMzE0NSIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjU1NDYyODAyLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuYXAtc291dGhlYXN0LTEuYW1hem9uYXdzLmNvbVwvYXAtc291dGhlYXN0LTFfWW9FOVBQR21QIiwiY29nbml0bzp1c2VybmFtZSI6ImVreWMwMDMiLCJleHAiOjE2NTU0NjMxMDIsImlhdCI6MTY1NTQ2MjgwMiwianRpIjoiZWYzNzZkNWYtMWM3My00MzQ4LWE0ZmYtYmQ0ZGI4NTE0MjZkIn0.KBePF_KU--mkxUiUB9ERSTT2HPQGNCZvFnzRMo1uggoqcZaul53dN-quJqLfwYbbOo1un4onxInHL3dF0UGMrY-7fOhASeBX7TX9rz8DKO2fMQfsxn72BjETER9BIHfmv8Dh5TEXwNL8-bMbMmZyeOdFBRVE1PmHSqNmdnumlMKdp0M4zrni_R_cDJ-u7JZXApeOZtau-BsV8IfcukMZw-4xMWCsv_LZhcZyY7eheV6C3D4Z_YWNFrIYScEvgpnInl9bfFQo5wUuEn0cN0JrIJMW86d_kn9-j1OTpFLBU8BB3VsHN_DsLqH2kjM50AFKq7n-RWha6SPeZhi-Xf5Fyg', 'Content-Length': '47533', 'Content-Type': 'application/json'} 
 body=b'{"kyc_trans_id": "EQ2022061700041", "alley": " ", "birth_date": "27-07-2537", "cid": "1100600292875", "date_of_issue": "04-06-2559", "district": "\\u0e2d\\u0e33\\u0e40\\u0e20\\u0e2d\\u0e1a\\u0e32\\u0e07\\u0e01\\u0e23\\u0e27\\u0e22", "expired_date": "26-07-2567", "first_name_en": "Patcharapol", "first_name_th": "\\u0e1e\\u0e31\\u0e0a\\u0e23\\u0e1e\\u0e25", "house_no": "425", "issue_by": "\\u0e1e\\u0e23\\u0e30\\u0e42\\u0e02\\u0e19\\u0e07/\\u0e01\\u0e23\\u0e38\\u0e07\\u0e40\\u0e17\\u0e1e\\u0e21\\u0e2b\\u0e32\\u0e19\\u0e04\\u0e23", "lane": " ", "last_name_en": "Supasirirat", "last_name_th": "\\u0e28\\u0e38\\u0e20\\u0e28\\u0e34\\u0e23\\u0e34\\u0e23\\u0e31\\u0e15\\u0e19\\u0e4c", "middle_name_en": "middle", "middle_name_th": "\\u0e01\\u0e25\\u0e32\\u0e07", "moo": " ", "province": "\\u0e1a\\u0e32\\u0e07\\u0e01\\u0e30\\u0e1b\\u0e34", "request_no": 123456789, "road": "\\u0e19\\u0e27\\u0e21\\u0e34\\u0e19\\u0e17\\u0e23\\u0e4c", "sex": "\\u0e0a\\u0e32\\u0e22", "sub_district": "\\u0e1a\\u0e32\\u0e07\\u0e2a\\u0e35\\u0e17\\u0e2d\\u0e07", "title_en": "Mr.", "title_th": "\\u0e19\\u0e32\\u0e22", "img": "'... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20220617 17:47:08.854" level="INFO">POST Response : url=https://tablet.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/validate_customer 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '234', 'Connection': 'keep-alive', 'Date': 'Fri, 17 Jun 2022 10:47:08 GMT', 'x-amzn-RequestId': 'f2dbe5f5-1082-441b-82c0-f79f32ec378b', 'x-amz-apigw-id': 'T3NBBHVoSQ0Fi5w=', 'X-Amzn-Trace-Id': 'Root=1-62ac5b9f-3a809653429232196c6b788c', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 57441ee201b6bfb8ff8be48f8e002574.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'SIN2-P2', 'X-Amz-Cf-Id': 'zrbOfkATvLmeCjHbA__qwjOVGa_rgvAKLxwCks_Fj_eo7JpM3lpEtQ=='} 
 body={"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"mobile_number":"0875787441","consent_new_version":true}} 
 </msg>
<msg timestamp="20220617 17:47:08.854" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220617 17:47:08.854" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220617 17:46:55.677" endtime="20220617 17:47:08.854"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${MOBILE_NO}</arg>
<arg>${response.json()["data"]["mobile_number"]}</arg>
</arguments>
<msg timestamp="20220617 17:47:08.858" level="INFO">${MOBILE_NO} = 0875787441</msg>
<status status="PASS" starttime="20220617 17:47:08.854" endtime="20220617 17:47:08.858"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CONSENT_NEW_VERSION}</arg>
<arg>${response.json()["data"]["consent_new_version"]}</arg>
</arguments>
<msg timestamp="20220617 17:47:08.861" level="INFO">${CONSENT_NEW_VERSION} = True</msg>
<status status="PASS" starttime="20220617 17:47:08.858" endtime="20220617 17:47:08.861"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CONSENT_NEW_VERSION}' == 'True'</arg>
<arg>Get_Consent_API_page.Agree_Consent</arg>
</arguments>
<kw name="Agree_Consent" library="Get_Consent_API_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220617 17:47:08.864" endtime="20220617 17:47:08.864"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220617 17:47:08.865" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiI0WmpGNDV1Mk1WaXBtYjZHXC9BM1ViWFdLWHp3UmYxSWNGMkx1XC9COWhUVEU9IiwiYWxnIjoiUlMyNTYifQ.eyJvcmlnaW5fanRpIjoiNmE5NjFmNDgtMzZiMi00ZjNiLWI3Y2ItNzFlNWQ5ZTYyZDRiIiwic3ViIjoiODM1ODEzZmUtYTBlYS00OTgyLWI4MDUtNmM3YzdlZDI4ZmU0IiwiYXVkIjoiMnJhbWxyc3E0OG8xMzE4bGFqZmdhMnRhb2kiLCJldmVudF9pZCI6IjI5ZjdiODNkLTNjNDktNDNiOC04ZTliLTk0ODI4MjRlMzE0NSIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjU1NDYyODAyLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuYXAtc291dGhlYXN0LTEuYW1hem9uYXdzLmNvbVwvYXAtc291dGhlYXN0LTFfWW9FOVBQR21QIiwiY29nbml0bzp1c2VybmFtZSI6ImVreWMwMDMiLCJleHAiOjE2NTU0NjMxMDIsImlhdCI6MTY1NTQ2MjgwMiwianRpIjoiZWYzNzZkNWYtMWM3My00MzQ4LWE0ZmYtYmQ0ZGI4NTE0MjZkIn0.KBePF_KU--mkxUiUB9ERSTT2HPQGNCZvFnzRMo1uggoqcZaul53dN-quJqLfwYbbOo1un4onxInHL3dF0UGMrY-7fOhASeBX7TX9rz8DKO2fMQfsxn72BjETER9BIHfmv8Dh5TEXwNL8-bMbMmZyeOdFBRVE1PmHSqNmdnumlMKdp0M4zrni_R_cDJ-u7JZXApeOZtau-BsV8IfcukMZw-4xMWCsv_LZhcZyY7eheV6C3D4Z_YWNFrIYScEvgpnInl9bfFQo5wUuEn0cN0JrIJMW86d_kn9-j1OTpFLBU8BB3VsHN_DsLqH2kjM50AFKq7n-RWha6SPeZhi-Xf5Fyg'}</msg>
<status status="PASS" starttime="20220617 17:47:08.864" endtime="20220617 17:47:08.865"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220617 17:47:08.866" level="INFO">Creating Session using : alias=eKYC, url=https://tablet.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220617 17:47:08.865" endtime="20220617 17:47:08.867"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{ "kyc_trans_id" : "${TRANS_ID}", "accept" : true }</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220617 17:47:08.867" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220617 17:47:08.868" level="INFO">To JSON using : content={ "kyc_trans_id" : "EQ2022061700041", "accept" : true } </msg>
<msg timestamp="20220617 17:47:08.868" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220617 17:47:08.868" level="INFO">${body} = {'kyc_trans_id': 'EQ2022061700041', 'accept': True}</msg>
<status status="PASS" starttime="20220617 17:47:08.867" endtime="20220617 17:47:08.868"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GET_CONSENT}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220617 17:47:11.898" level="INFO">POST Request : url=https://tablet.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/consent 
 path_url=/tcrb-platform-kyc/v1/consent 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiI0WmpGNDV1Mk1WaXBtYjZHXC9BM1ViWFdLWHp3UmYxSWNGMkx1XC9COWhUVEU9IiwiYWxnIjoiUlMyNTYifQ.eyJvcmlnaW5fanRpIjoiNmE5NjFmNDgtMzZiMi00ZjNiLWI3Y2ItNzFlNWQ5ZTYyZDRiIiwic3ViIjoiODM1ODEzZmUtYTBlYS00OTgyLWI4MDUtNmM3YzdlZDI4ZmU0IiwiYXVkIjoiMnJhbWxyc3E0OG8xMzE4bGFqZmdhMnRhb2kiLCJldmVudF9pZCI6IjI5ZjdiODNkLTNjNDktNDNiOC04ZTliLTk0ODI4MjRlMzE0NSIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjU1NDYyODAyLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuYXAtc291dGhlYXN0LTEuYW1hem9uYXdzLmNvbVwvYXAtc291dGhlYXN0LTFfWW9FOVBQR21QIiwiY29nbml0bzp1c2VybmFtZSI6ImVreWMwMDMiLCJleHAiOjE2NTU0NjMxMDIsImlhdCI6MTY1NTQ2MjgwMiwianRpIjoiZWYzNzZkNWYtMWM3My00MzQ4LWE0ZmYtYmQ0ZGI4NTE0MjZkIn0.KBePF_KU--mkxUiUB9ERSTT2HPQGNCZvFnzRMo1uggoqcZaul53dN-quJqLfwYbbOo1un4onxInHL3dF0UGMrY-7fOhASeBX7TX9rz8DKO2fMQfsxn72BjETER9BIHfmv8Dh5TEXwNL8-bMbMmZyeOdFBRVE1PmHSqNmdnumlMKdp0M4zrni_R_cDJ-u7JZXApeOZtau-BsV8IfcukMZw-4xMWCsv_LZhcZyY7eheV6C3D4Z_YWNFrIYScEvgpnInl9bfFQo5wUuEn0cN0JrIJMW86d_kn9-j1OTpFLBU8BB3VsHN_DsLqH2kjM50AFKq7n-RWha6SPeZhi-Xf5Fyg', 'Content-Length': '51', 'Content-Type': 'application/json'} 
 body=b'{"kyc_trans_id": "EQ2022061700041", "accept": true}' 
 </msg>
<msg timestamp="20220617 17:47:11.899" level="INFO">POST Response : url=https://tablet.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/consent 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '181', 'Connection': 'keep-alive', 'Date': 'Fri, 17 Jun 2022 10:47:11 GMT', 'x-amzn-RequestId': '14b208dc-09f1-457c-b002-afbe6efc46a6', 'x-amz-apigw-id': 'T3NDDHhTyQ0FkaQ=', 'X-Amzn-Trace-Id': 'Root=1-62ac5bac-1716e849187609eb6cefaa94', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 d4cace4cc5e331ffcb566a47ffd57416.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'SIN2-P2', 'X-Amz-Cf-Id': 't2oDkxfuQDE5_MxKoF2qAQnbCCRMi05z2YM10CHxMAASvB8ZlThgWw=='} 
 body={"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null} 
 </msg>
<msg timestamp="20220617 17:47:11.899" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220617 17:47:11.899" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220617 17:47:08.868" endtime="20220617 17:47:11.899"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.json()["status"]["code"]}</arg>
<arg>${RESPONSE_CODE_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20220617 17:47:11.899" endtime="20220617 17:47:11.900"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CONSENT_MESSAGE}</arg>
<arg>${response.json()["status"]["message"]}</arg>
</arguments>
<msg timestamp="20220617 17:47:11.902" level="INFO">${CONSENT_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220617 17:47:11.900" endtime="20220617 17:47:11.903"></status>
</kw>
<status status="PASS" starttime="20220617 17:47:08.863" endtime="20220617 17:47:11.903"></status>
</kw>
<status status="PASS" starttime="20220617 17:47:08.862" endtime="20220617 17:47:11.903"></status>
</kw>
<status status="PASS" starttime="20220617 17:46:55.336" endtime="20220617 17:47:11.903"></status>
</kw>
<kw name="Check_DOPA" library="Check_DOPA_API_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220617 17:47:11.904" endtime="20220617 17:47:11.904"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220617 17:47:11.904" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiI0WmpGNDV1Mk1WaXBtYjZHXC9BM1ViWFdLWHp3UmYxSWNGMkx1XC9COWhUVEU9IiwiYWxnIjoiUlMyNTYifQ.eyJvcmlnaW5fanRpIjoiNmE5NjFmNDgtMzZiMi00ZjNiLWI3Y2ItNzFlNWQ5ZTYyZDRiIiwic3ViIjoiODM1ODEzZmUtYTBlYS00OTgyLWI4MDUtNmM3YzdlZDI4ZmU0IiwiYXVkIjoiMnJhbWxyc3E0OG8xMzE4bGFqZmdhMnRhb2kiLCJldmVudF9pZCI6IjI5ZjdiODNkLTNjNDktNDNiOC04ZTliLTk0ODI4MjRlMzE0NSIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjU1NDYyODAyLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuYXAtc291dGhlYXN0LTEuYW1hem9uYXdzLmNvbVwvYXAtc291dGhlYXN0LTFfWW9FOVBQR21QIiwiY29nbml0bzp1c2VybmFtZSI6ImVreWMwMDMiLCJleHAiOjE2NTU0NjMxMDIsImlhdCI6MTY1NTQ2MjgwMiwianRpIjoiZWYzNzZkNWYtMWM3My00MzQ4LWE0ZmYtYmQ0ZGI4NTE0MjZkIn0.KBePF_KU--mkxUiUB9ERSTT2HPQGNCZvFnzRMo1uggoqcZaul53dN-quJqLfwYbbOo1un4onxInHL3dF0UGMrY-7fOhASeBX7TX9rz8DKO2fMQfsxn72BjETER9BIHfmv8Dh5TEXwNL8-bMbMmZyeOdFBRVE1PmHSqNmdnumlMKdp0M4zrni_R_cDJ-u7JZXApeOZtau-BsV8IfcukMZw-4xMWCsv_LZhcZyY7eheV6C3D4Z_YWNFrIYScEvgpnInl9bfFQo5wUuEn0cN0JrIJMW86d_kn9-j1OTpFLBU8BB3VsHN_DsLqH2kjM50AFKq7n-RWha6SPeZhi-Xf5Fyg'}</msg>
<status status="PASS" starttime="20220617 17:47:11.904" endtime="20220617 17:47:11.904"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220617 17:47:11.905" level="INFO">Creating Session using : alias=eKYC, url=https://tablet.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220617 17:47:11.904" endtime="20220617 17:47:11.905"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"kyc_trans_id":"${TRANS_ID}","laser" : "${GET_LASER_CODE}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220617 17:47:11.905" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220617 17:47:11.906" level="INFO">To JSON using : content={"kyc_trans_id":"EQ2022061700041","laser" : "JT3102714867"} </msg>
<msg timestamp="20220617 17:47:11.906" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220617 17:47:11.906" level="INFO">${body} = {'kyc_trans_id': 'EQ2022061700041', 'laser': 'JT3102714867'}</msg>
<status status="PASS" starttime="20220617 17:47:11.905" endtime="20220617 17:47:11.906"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_CHECK_DOPA}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220617 17:47:22.266" level="INFO">POST Request : url=https://tablet.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/dopa 
 path_url=/tcrb-platform-kyc/v1/dopa 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiI0WmpGNDV1Mk1WaXBtYjZHXC9BM1ViWFdLWHp3UmYxSWNGMkx1XC9COWhUVEU9IiwiYWxnIjoiUlMyNTYifQ.eyJvcmlnaW5fanRpIjoiNmE5NjFmNDgtMzZiMi00ZjNiLWI3Y2ItNzFlNWQ5ZTYyZDRiIiwic3ViIjoiODM1ODEzZmUtYTBlYS00OTgyLWI4MDUtNmM3YzdlZDI4ZmU0IiwiYXVkIjoiMnJhbWxyc3E0OG8xMzE4bGFqZmdhMnRhb2kiLCJldmVudF9pZCI6IjI5ZjdiODNkLTNjNDktNDNiOC04ZTliLTk0ODI4MjRlMzE0NSIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjU1NDYyODAyLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuYXAtc291dGhlYXN0LTEuYW1hem9uYXdzLmNvbVwvYXAtc291dGhlYXN0LTFfWW9FOVBQR21QIiwiY29nbml0bzp1c2VybmFtZSI6ImVreWMwMDMiLCJleHAiOjE2NTU0NjMxMDIsImlhdCI6MTY1NTQ2MjgwMiwianRpIjoiZWYzNzZkNWYtMWM3My00MzQ4LWE0ZmYtYmQ0ZGI4NTE0MjZkIn0.KBePF_KU--mkxUiUB9ERSTT2HPQGNCZvFnzRMo1uggoqcZaul53dN-quJqLfwYbbOo1un4onxInHL3dF0UGMrY-7fOhASeBX7TX9rz8DKO2fMQfsxn72BjETER9BIHfmv8Dh5TEXwNL8-bMbMmZyeOdFBRVE1PmHSqNmdnumlMKdp0M4zrni_R_cDJ-u7JZXApeOZtau-BsV8IfcukMZw-4xMWCsv_LZhcZyY7eheV6C3D4Z_YWNFrIYScEvgpnInl9bfFQo5wUuEn0cN0JrIJMW86d_kn9-j1OTpFLBU8BB3VsHN_DsLqH2kjM50AFKq7n-RWha6SPeZhi-Xf5Fyg', 'Content-Length': '60', 'Content-Type': 'application/json'} 
 body=b'{"kyc_trans_id": "EQ2022061700041", "laser": "JT3102714867"}' 
 </msg>
<msg timestamp="20220617 17:47:22.266" level="INFO">POST Response : url=https://tablet.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/dopa 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '274', 'Connection': 'keep-alive', 'Date': 'Fri, 17 Jun 2022 10:47:22 GMT', 'x-amzn-RequestId': '32f9270e-053a-43c4-94a0-d1071d5f093d', 'x-amz-apigw-id': 'T3NDiFbayQ0FcMA=', 'X-Amzn-Trace-Id': 'Root=1-62ac5bb0-14e85366420a2ace1a775a65', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 b238fef36fc101d581d2aebbbc69d9a6.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'SIN2-P2', 'X-Amz-Cf-Id': 'S-wSxBIYnX7vT_Jsx3TpQYq2Ogd1Movobz_k7pkuowNCPMqXsDhfWw=='} 
 body={"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"kyc_trans_id":"EQ2022061700041","dopa_status":"0","dopa_message":"สถานะปกติ"}} 
 </msg>
<msg timestamp="20220617 17:47:22.266" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220617 17:47:22.267" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220617 17:47:11.907" endtime="20220617 17:47:22.267"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()["status"]["message"]}</arg>
</arguments>
<msg timestamp="20220617 17:47:22.268" level="INFO">Success</msg>
<status status="PASS" starttime="20220617 17:47:22.267" endtime="20220617 17:47:22.268"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DOPA_MESSAGE}</arg>
<arg>${response.json()["status"]["message"]}</arg>
</arguments>
<msg timestamp="20220617 17:47:22.273" level="INFO">${DOPA_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220617 17:47:22.269" endtime="20220617 17:47:22.274"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DOPA_REMARK}</arg>
<arg>${response.json()["status"]["remark"]}</arg>
</arguments>
<msg timestamp="20220617 17:47:22.278" level="INFO">${DOPA_REMARK} = </msg>
<status status="PASS" starttime="20220617 17:47:22.274" endtime="20220617 17:47:22.278"></status>
</kw>
<status status="PASS" starttime="20220617 17:47:11.903" endtime="20220617 17:47:22.278"></status>
</kw>
<kw name="Liveness_and_FR_Pass" library="LivenessAPI_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220617 17:47:22.280" endtime="20220617 17:47:22.280"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220617 17:47:22.281" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiI0WmpGNDV1Mk1WaXBtYjZHXC9BM1ViWFdLWHp3UmYxSWNGMkx1XC9COWhUVEU9IiwiYWxnIjoiUlMyNTYifQ.eyJvcmlnaW5fanRpIjoiNmE5NjFmNDgtMzZiMi00ZjNiLWI3Y2ItNzFlNWQ5ZTYyZDRiIiwic3ViIjoiODM1ODEzZmUtYTBlYS00OTgyLWI4MDUtNmM3YzdlZDI4ZmU0IiwiYXVkIjoiMnJhbWxyc3E0OG8xMzE4bGFqZmdhMnRhb2kiLCJldmVudF9pZCI6IjI5ZjdiODNkLTNjNDktNDNiOC04ZTliLTk0ODI4MjRlMzE0NSIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjU1NDYyODAyLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuYXAtc291dGhlYXN0LTEuYW1hem9uYXdzLmNvbVwvYXAtc291dGhlYXN0LTFfWW9FOVBQR21QIiwiY29nbml0bzp1c2VybmFtZSI6ImVreWMwMDMiLCJleHAiOjE2NTU0NjMxMDIsImlhdCI6MTY1NTQ2MjgwMiwianRpIjoiZWYzNzZkNWYtMWM3My00MzQ4LWE0ZmYtYmQ0ZGI4NTE0MjZkIn0.KBePF_KU--mkxUiUB9ERSTT2HPQGNCZvFnzRMo1uggoqcZaul53dN-quJqLfwYbbOo1un4onxInHL3dF0UGMrY-7fOhASeBX7TX9rz8DKO2fMQfsxn72BjETER9BIHfmv8Dh5TEXwNL8-bMbMmZyeOdFBRVE1PmHSqNmdnumlMKdp0M4zrni_R_cDJ-u7JZXApeOZtau-BsV8IfcukMZw-4xMWCsv_LZhcZyY7eheV6C3D4Z_YWNFrIYScEvgpnInl9bfFQo5wUuEn0cN0JrIJMW86d_kn9-j1OTpFLBU8BB3VsHN_DsLqH2kjM50AFKq7n-RWha6SPeZhi-Xf5Fyg'}</msg>
<status status="PASS" starttime="20220617 17:47:22.280" endtime="20220617 17:47:22.281"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220617 17:47:22.282" level="INFO">Creating Session using : alias=eKYC, url=https://tablet.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220617 17:47:22.281" endtime="20220617 17:47:22.282"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"image_source":"${IMG_SOURCE}","kyc_trans_id" : "${TRANS_ID}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220617 17:47:22.283" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220617 17:47:22.284" level="INFO">To JSON using : content={"image_source":"","kyc_trans_id" : "EQ2022061700041"} </msg>
<msg timestamp="20220617 17:47:22.284" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220617 17:47:22.285" level="INFO">${body} = {'image_source': '/9j/4AAQSkZJRgABAQAAAQABAAD/4gIoSUNDX1BST0ZJTEUAAQEAAAIYAAAAAAIQAABtbnRyUkdCIFhZWiAAAAAAAAAAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAAAAAAAAAAAAAAAAAAAAAAAA...</msg>
<status status="PASS" starttime="20220617 17:47:22.283" endtime="20220617 17:47:22.285"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_VALIDATE_IMAGE}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20220617 17:47:31.840" level="INFO">POST Request : url=https://tablet.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/facial 
 path_url=/tcrb-platform-kyc/v1/facial 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiI0WmpGNDV1Mk1WaXBtYjZHXC9BM1ViWFdLWHp3UmYxSWNGMkx1XC9COWhUVEU9IiwiYWxnIjoiUlMyNTYifQ.eyJvcmlnaW5fanRpIjoiNmE5NjFmNDgtMzZiMi00ZjNiLWI3Y2ItNzFlNWQ5ZTYyZDRiIiwic3ViIjoiODM1ODEzZmUtYTBlYS00OTgyLWI4MDUtNmM3YzdlZDI4ZmU0IiwiYXVkIjoiMnJhbWxyc3E0OG8xMzE4bGFqZmdhMnRhb2kiLCJldmVudF9pZCI6IjI5ZjdiODNkLTNjNDktNDNiOC04ZTliLTk0ODI4MjRlMzE0NSIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjU1NDYyODAyLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuYXAtc291dGhlYXN0LTEuYW1hem9uYXdzLmNvbVwvYXAtc291dGhlYXN0LTFfWW9FOVBQR21QIiwiY29nbml0bzp1c2VybmFtZSI6ImVreWMwMDMiLCJleHAiOjE2NTU0NjMxMDIsImlhdCI6MTY1NTQ2MjgwMiwianRpIjoiZWYzNzZkNWYtMWM3My00MzQ4LWE0ZmYtYmQ0ZGI4NTE0MjZkIn0.KBePF_KU--mkxUiUB9ERSTT2HPQGNCZvFnzRMo1uggoqcZaul53dN-quJqLfwYbbOo1un4onxInHL3dF0UGMrY-7fOhASeBX7TX9rz8DKO2fMQfsxn72BjETER9BIHfmv8Dh5TEXwNL8-bMbMmZyeOdFBRVE1PmHSqNmdnumlMKdp0M4zrni_R_cDJ-u7JZXApeOZtau-BsV8IfcukMZw-4xMWCsv_LZhcZyY7eheV6C3D4Z_YWNFrIYScEvgpnInl9bfFQo5wUuEn0cN0JrIJMW86d_kn9-j1OTpFLBU8BB3VsHN_DsLqH2kjM50AFKq7n-RWha6SPeZhi-Xf5Fyg', 'Content-Length': '43115', 'Content-Type': 'application/json'} 
 body=b'{"image_source": "'... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20220617 17:47:31.840" level="INFO">POST Response : url=https://tablet.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/facial 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '130', 'Connection': 'keep-alive', 'Date': 'Fri, 17 Jun 2022 10:47:31 GMT', 'x-amzn-RequestId': 'eea8f7b6-fb72-438c-a389-aad902d360b9', 'x-amz-apigw-id': 'T3NFLFKjSQ0FVdA=', 'X-Amzn-Trace-Id': 'Root=1-62ac5bba-551666b34edfe15f19da5e6a', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 9725312341802185c9ebf086bf95544e.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'SIN2-P2', 'X-Amz-Cf-Id': 'byG60OY9tH7zzZkhJVC7fjZFLolJZh7RZqB1_K6UnKYaZKBHnU2BEw=='} 
 body={"status":{"code":"0","message":"Success","remark":"","user_code":null,"user_message_en":null,"user_message_th":null},"data":null} 
 </msg>
<msg timestamp="20220617 17:47:31.841" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220617 17:47:31.841" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220617 17:47:22.285" endtime="20220617 17:47:31.841"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${MESS_STATUS}</arg>
<arg>${resp.json()["status"]["message"]}</arg>
</arguments>
<msg timestamp="20220617 17:47:31.844" level="INFO">${MESS_STATUS} = Success</msg>
<status status="PASS" starttime="20220617 17:47:31.841" endtime="20220617 17:47:31.844"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LN_FR_RESPONE_MESSAGE}</arg>
<arg>${resp.json()["status"]["message"]}</arg>
</arguments>
<msg timestamp="20220617 17:47:31.847" level="INFO">${LN_FR_RESPONE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220617 17:47:31.844" endtime="20220617 17:47:31.847"></status>
</kw>
<status status="PASS" starttime="20220617 17:47:22.279" endtime="20220617 17:47:31.848"></status>
</kw>
<doc>happy case</doc>
<status status="PASS" starttime="20220617 17:46:35.986" endtime="20220617 17:47:31.848" critical="yes"></status>
</test>
<kw name="Log To Console" library="BuiltIn" type="teardown">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${TRANS_ID}</arg>
</arguments>
<status status="PASS" starttime="20220617 17:47:31.851" endtime="20220617 17:47:31.851"></status>
</kw>
<status status="PASS" starttime="20220617 17:46:34.726" endtime="20220617 17:47:31.851"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="24.Push Noti Test">24.Push Noti Test</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20220617 17:46:51.089" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220617 17:46:55.674" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220617 17:47:08.867" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220617 17:47:11.905" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220617 17:47:22.283" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
</errors>
</robot>
